// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mniak/hsmlib (interfaces: PacketStream,Logger)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	hsmlib "github.com/mniak/hsmlib"
	gomock "go.uber.org/mock/gomock"
)

// MockPacketStream is a mock of PacketStream interface.
type MockPacketStream struct {
	ctrl     *gomock.Controller
	recorder *MockPacketStreamMockRecorder
}

// MockPacketStreamMockRecorder is the mock recorder for MockPacketStream.
type MockPacketStreamMockRecorder struct {
	mock *MockPacketStream
}

// NewMockPacketStream creates a new mock instance.
func NewMockPacketStream(ctrl *gomock.Controller) *MockPacketStream {
	mock := &MockPacketStream{ctrl: ctrl}
	mock.recorder = &MockPacketStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketStream) EXPECT() *MockPacketStreamMockRecorder {
	return m.recorder
}

// ReceivePacket mocks base method.
func (m *MockPacketStream) ReceivePacket() (hsmlib.Packet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivePacket")
	ret0, _ := ret[0].(hsmlib.Packet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceivePacket indicates an expected call of ReceivePacket.
func (mr *MockPacketStreamMockRecorder) ReceivePacket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivePacket", reflect.TypeOf((*MockPacketStream)(nil).ReceivePacket))
}

// SendPacket mocks base method.
func (m *MockPacketStream) SendPacket(arg0 hsmlib.Packet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacket", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPacket indicates an expected call of SendPacket.
func (mr *MockPacketStreamMockRecorder) SendPacket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacket", reflect.TypeOf((*MockPacketStream)(nil).SendPacket), arg0)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}
